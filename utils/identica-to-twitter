#!/usr/bin/env perl

# Gets all of failo's twats from ideni.ca/twatter

use feature ':5.10';
use strict;
use warnings;
use Net::Twitter;
use Scalar::Util qw(blessed);
use Array::Diff;
use Data::Dump 'dump';

my $fo_shizzle = (@ARGV and $ARGV[0] =~ /fo-shizzle/);

my $failo_pass = do {
    chomp(my $pass = qx[sudo cat /home/hinrik/src/failo/identica_pass.txt]);
    $pass;
};

my $dent = Net::Twitter->new(
    traits => ['API::REST'],
    username => 'failo',
    password => $failo_pass,
    identica => 1,
);

my $twat = Net::Twitter->new(
    traits => ['API::REST'],
    username => 'failofailo',
    password => $failo_pass,
    clientname => 'failo',
);

my @dent_raw = reverse get_all_statuses($dent);
my @twat_raw = map { $_->[1] =~ s/&lt;/</g; $_->[1] =~ s/&gt;/>/g; $_ } reverse get_all_statuses($twat);
my @dent = map { $_->[1] } @dent_raw;
my @twat = map { $_->[1] } @twat_raw;

say "Got " . scalar(@dent) . " dents from identi.ca and " . scalar(@twat) . " twats from twitter";

{
# For review
open my $d, ">", "/tmp/dent.txt" or die "Can't open /tmp/dent.txt: $!";
for (map { "http://identi.ca/notice/$_->[0]\t$_->[1]"} @dent_raw) {
    say $d $_;
}
close $d;

open my $t, ">", "/tmp/twat.txt" or die "Can't open /tmp/twat.txt: $!";
for (map { "http://twitter.com/failofailo/status/$_->[0]\t$_->[1]"} @twat_raw) {
    say $t $_;
}
close $t;
}

my $diff = Array::Diff->diff( \@twat, \@dent );
my $d_add = $diff->added;
my $d_del = $diff->deleted;

if (@$d_del) {
    die "There shouldn't be anything on twitter that's not on identi.ca, this was on twitter but not identi.ca" . dump($d_del);
}

say "Syncing " . @$d_add . " notices to twitter from identi.ca";
say " * $_" for @$d_add;

unless ($fo_shizzle) {
    say "run the script again with --fo-shizzle to really sync";
    exit 1;
}

my $twats = @$d_add;

for my $num (1 .. $twats) {
    my $long = $d_add->[$num - 1];
    my $time = localtime;
    say "$time: Transferring twat $num/$twats: $long";

    TRY: for my $try (1 .. 3) {
        local $@;
        eval {
            $twat->update( $long );
        };
        if ($@) {
            die $@ unless blessed($@) and $@->isa('Net::Twitter::Error');

            warn "HTTP Response Code: ", $@->code(), "\n",
            "HTTP Message......: ", $@->message(), "\n",
            "Twitter error.....: ", $@->error(), "\n";

            warn "Failed try $try/3 to post twat $num/$twats";
            sleep 30;
            next TRY;
        } else {
            # Great succes
            last TRY;
        }
    }

    #my $sleep = int rand 20;
    #sleep $sleep * 60;
}

sub get_all_statuses
{
    my $twat = shift;
    my @status;

    my $page = 1;
    while (1) {
        my $count = @status;
        eval {
            my $statuses = $twat->user_timeline({ count => 100, page => $page });
            for my $status ( @$statuses ) {
                # Correctly handle the Icelandic
                utf8::encode($status->{text});

                #print "<$status->{user}{screen_name}> $status->{text}\n";
                push @status => [ $status->{id}, $status->{text} ];
            }
        };
        if ( my $err = $@ ) {
            die $@ unless blessed $err && $err->isa('Net::Twitter::Error');

            warn
            "HTTP Response Code: ", $err->code, "\n",
            "HTTP Message......: ", $err->message, "\n",
            "Twitter error.....: ", $err->error, "\n";
        }


        if ($count == @status) {
            # All done
            last;
        }

        $page ++;
    }

    @status;
}
