#!/usr/bin/env perl
BEGIN {  chdir '/home/failo/failo' or die $! };
use strict;
use warnings;
use lib '/home/failo/failo/lib';
use POE;
use POE::Component::Hailo;
use POE::Component::IRC::State;
use POE::Component::IRC::Plugin::BotCommand;
use POE::Component::IRC::Plugin::Connector;
use POE::Component::IRC::Plugin::Hailo;
use POE::Component::IRC::Plugin::ImageMirror;
use POE::Component::IRC::Plugin::RTorrentStatus;
use Failo::Identica;
use Failo::URITitle;
#use Failo::Old;
#use Failo::Translator;
#use Failo::Resolver;
use Fcntl ':flock';

my $name = '/home/failo/failo/failo';
open my $self, '<', $name or die "Couldn't open self: $!";
flock $self, LOCK_EX | LOCK_NB or die "This script is already running";

POE::Session->create(
    package_states => [
        (__PACKAGE__) => [qw(_start _int)],
    ],
);

POE::Kernel->run;

sub _start {
    my ($kernel, $heap) = @_[KERNEL, HEAP];

    my $hailo = POE::Component::Hailo->spawn(
        alias      => 'hailo',
        Hailo_args => {
            storage_class  => 'SQLite',
            brain_resource => '/home/failo/failo/failo.sqlite',
        },
    );

    my $irc_pass = qx/cat bouncer_pass.txt/;
    chomp $irc_pass;

    my %ircs;
    for my $network (qw(freenode)) {
        my $irc = POE::Component::IRC::State->spawn(
            nick         => $network,
            password     => $irc_pass,
            server       => 'localhost',
            port         => 50444,
            debug        => 1,
            plugin_debug => 1,
        );

        $irc->plugin_add('Connector', POE::Component::IRC::Plugin::Connector->new());
        $irc->plugin_add('BotCommand', POE::Component::IRC::Plugin::BotCommand->new(
            Addressed => 0,
            Prefix    => ',',
            Eat       => 1,
        ));

        $irc->plugin_add(Torrent => POE::Component::IRC::Plugin::RTorrentStatus->new(
            Torrent_log => '/tmp/torrentlog',
            Channels    => ['#avar'],
        ));

        $irc->plugin_add(ImageMirror => POE::Component::IRC::Plugin::ImageMirror->new(
            Channels => ['#avar'],
            URI_match => [
                qr{(?:chan\.(?:ru|net|org)|anonib\.com|2ch\.ru|ringulreid\.org)/\w+/src/.*(?i:jpe?g|gif|png)$},
                qr{anonib\.com.*(?i:jpe?g|gif|png)$},
            ],
            URI_subst => [
                qr{(?<=^)https(?=://ringulreid\.org/)}     => 'http',
                qr{(?<=^)https(?=://(?:www\.)?7chan\.org)} => 'http',
            ],
        ));

        $irc->plugin_add(URITitle => Failo::URITitle->new(
            Channels => ['#avar'],
            URI_nomatch => [
                qr{(?:chan\.(?:ru|net|org)|anonib\.com|2ch\.ru|ringulreid\.org)/\w+/src/.*(?i:jpe?g|gif|png)$},
                qr{anonib\.com.*(?i:jpe?g|gif|png)$},
            ],
        ));

        $irc->plugin_add('Identica', Failo::Identica->new());
        $irc->plugin_add('Hailo', POE::Component::IRC::Plugin::Hailo->new(
            ($network eq 'freenode' ? (Own_channel => '#failo') : ()),
            Hailo        => $hailo,
            Abuse_interval => 0,
            English        => 1,
            Talkative      => 1,
            Method         => 'noticelo',
            Ignore_regexes => [
                qr{\w+://\w},   # ignore lines containing urls
            ],
        ));

        #$irc->plugin_add('Old', Failo::Old->new());
        #$irc->plugin_add('Translator', Failo::Translator->new());
        #$irc->plugin_add('Resolver', Failo::Resolver->new());

        $heap->{ircs}{$network} = $irc;
    }

    $kernel->sig(INT => '_int');
    $_->yield('connect') for values %{ $heap->{ircs} };
}

sub _int {
    my ($kernel, $heap) = @_[KERNEL, HEAP];
    $_->yield('shutdown') for values %{ $heap->{ircs} };
    $kernel->post(hailo => 'shutdown');
    $kernel->sig_handled();
}
